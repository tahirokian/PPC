#!/usr/bin/env python

import datetime
import os
import platform
import socket
import subprocess
import sys

# Course setup

WEEK0 = (2016, 14)
WEEKS = 6
MAARI_A = 'albatrossi, broileri, dodo, drontti, emu, fasaani, flamingo, iibis, kakadu, kalkkuna, karakara, kasuaari, kiuru, kiwi, kolibri, kondori, kookaburra, koskelo, kuukkeli, lunni, moa, pelikaani, pitohui, pulu, ruokki, siira, strutsi, suula, tavi, tukaani, undulaatti'.split(', ')
MAARI_C = 'akaatti, akvamariini, ametisti, baryytti, berylli, fluoriitti, granaatti, hypersteeni, jade, jaspis, karneoli, korundi, kuukivi, malakiitti, meripihka, opaali, peridootti, rubiini, safiiri, sitriini, smaragdi, spektroliitti, spinelli, timantti, topaasi, turkoosi, turmaliini, vuorikide, zirkoni'.split(', ')

HOSTS = set()

for host in MAARI_A + MAARI_C:
    HOSTS.add(host + '.aalto.fi')
    HOSTS.add(host + '.org.aalto.fi')

URL_BASE = 'https://users.ics.aalto.fi/suomela/ppc-2016/'

# Task setup

REPORT = 'report.pdf'

class default:
    MAX = [5,3]
    TESTS_CPU = [
        ['make', 'clean'],
        ['make', '-j', 'DEBUG=2'],
        ['make', 'test'],
        ['make', 'clean'],
        ['make', '-j'],
        ['make', 'test'],
    ]
    TESTS_GPU = [
        ['make', 'clean'],
        ['make', '-j'],
        ['make', 'test'],
    ]

TASKS = [
    {
        'id': 'mf1',
        'benchmark': ['./mf-benchmark', '1000', '1000', '10'],
        'columns': [4, 5],
        'time': [4, 5, 6, 8],
        'week': 1,
    },
    {
        'id': 'mf2',
        'benchmark': ['./mf-benchmark', '1000', '1000', '10'],
        'columns': [4, 5],
        'time': [1, 1.5, 2, 2.5],
        'week': 2,
    },
    {
        'id': 'mf3',
        'benchmark': ['./mf-benchmark', '4000', '4000', '50'],
        'columns': [4, 5],
        'time': [3, 6, 16, 40],
    },
    {
        'id': 'mf4',
        'gpu': True,
        'benchmark': ['./mf-benchmark', '1000', '1000', '10'],
        'columns': [4, 5],
        'time': [0.3, 1, 10, 100],
    },
    {
        'id': 'cp1',
        'benchmark': ['./cp-benchmark', '4000', '1000'],
        'columns': [3, 4],
        'time': [8, 10, 15, 20],
        'week': 1,
    },
    {
        'id': 'cp2',
        'benchmark': ['./cp-benchmark', '4000', '4000'],
        'columns': [3, 4],
        'time': [10, 12, 15, 20],
        'week': 2,
    },
    {
        'id': 'cp3',
        'benchmark': ['./cp-benchmark', '4000', '4000'],
        'columns': [3, 4],
        'time': [6, 7, 8, 9],
        'week': 3,
    },
    {
        'id': 'cp4',
        'benchmark': ['./cp-benchmark', '4000', '4000'],
        'columns': [3, 4],
        'time': [0.6, 1, 2, 3],
        'week': 3,
    },
    {
        'id': 'cp5',
        'report': True,
    },
    {
        'id': 'cp6',
        'report': True,
    },
    {
        'id': 'cp7',
        'report': True,
    },
    {
        'id': 'cp8',
        'gpu': True,
        'benchmark': ['./cp-benchmark', '1500', '1500', '2'],
        'columns': [3, 4],
        'rows': [1, 2],
        'time': [2, 3, 4, 5, 6, 8, 10, 15, 20],
        'week': 5,
        'max': [10,6],
    },
    {
        'id': 'cp9',
        'gpu': True,
        'benchmark': ['./cp-benchmark', '4000', '4000', '2'],
        'columns': [3, 4],
        'rows': [1, 2],
        'time': [0.5, 1, 1.5, 2, 4, 6, 10, 20],
        'week': 6,
        'max': [10,6],
    },
    {
        'id': 'is1',
        'benchmark': ['./is-benchmark', '400', '400'],
        'columns': [3, 4],
        'time': [6, 8, 10, 12],
        'week': 4,
    },
    {
        'id': 'is2',
        'benchmark': ['./pngsegment', '../data/c1.png', '/dev/null', '/dev/null'],
        'columns': [3, 4],
        'time': [0.1, 1, 10, 100],
    },
    {
        'id': 'is3',
        'gpu': True,
        'benchmark': ['./is-benchmark', '400', '400'],
        'columns': [3, 4],
        'time': [1, 2, 4, 10],
    },
    {
        'id': 'so1',
        'benchmark': ['./so-test', '100000000'],
        'columns': [3, 5],
        'rows': [0, 5],
        'time': [2.2, 2.5, 3.0, 3.5],
        'week': 4,
    },
    {
        'id': 'so2',
        'benchmark': ['./so-test', '100000000'],
        'columns': [3, 5],
        'rows': [0, 5],
        'time': [2.2, 2.5, 3.0, 3.5],
    },
    {
        'id': 'so3',
        'gpu': True,
        'benchmark': ['./so-test', '100000000'],
        'columns': [3, 5],
        'rows': [0, 5],
        'time': [1, 2, 5, 10],
    },
    {
        'id': 'so4',
        'gpu': True,
        'benchmark': ['./so-test', '100000000'],
        'columns': [3, 5],
        'rows': [0, 5],
        'time': [1, 2, 5, 10],
    },
]

# Generic

inf = float("inf")

class col:
    reset = '\033[0m'
    error = '\033[31;1m'
    good = '\033[34;1m'
    task = '\033[35;1m'
    bold = '\033[1m'
    cmd = '\033[34m'

def warning(s):
    print '\n' + col.error + s + col.reset + '\n'

def error(s):
    sys.exit('\n' + col.error + s + col.reset + '\n')

def pcmd(c, indent=0):
    print " " * indent + col.cmd + " ".join(c) + col.reset

def ptask(task):
    print
    print col.task + "TASK {}: {}".format(task.id.upper(), task.url) + col.reset
    print

def plural(x,l):
    if x == 1:
        return "{} {}".format(x,l)
    else:
        return "{} {}s".format(x,l)

def weeks(x):
    return plural(x, "week")

def week_range(x,y):
    if x == y:
        return "week {}".format(x)
    else:
        return "weeks {}-{}".format(x,y)

def print_run(c, output=False):
    print
    pcmd(c)
    try:
        if output:
            return subprocess.check_output(c)
        else:
            subprocess.check_call(c)
    except:
        error("Command '{}' failed".format(" ".join(c)))

def dnone(x, s=""):
    return s if x is None else "{:d}".format(x)


class Result:
    def __init__(self, task, i):
        self.index = i
        self.week = i + 1
        self.task = task
        sfile = 'submission-{}.txt'.format(self.week)
        ffile = 'feedback-{}.txt'.format(self.week)
        self.sfile_short = os.path.join(task.id, sfile)
        self.ffile_short = os.path.join(task.id, ffile)
        self.sfile = os.path.join(task.path, sfile)
        self.ffile = os.path.join(task.path, ffile)
        self.submission = None
        self.feedback = None
        self.max = task.get_max(self.week)
        try:
            with open(self.sfile) as f:
                self.submission = float(f.readline().rstrip())
            with open(self.ffile) as f:
                self.feedback = int(f.readline().rstrip())
        except IOError:
            pass
        self.automatic = None
        self.final = None
        if self.submission is not None:
            self.automatic = task.score(self.week, self.submission)
        if self.automatic is not None and self.feedback is not None:
            self.final = self.automatic + self.feedback


class Task:
    def __init__(self, grading, t):
        self.grading = grading
        self.id = t['id']
        self.report = t.get('report', False)
        if not self.report:
            self.gpu = t.get('gpu', False)
            self.tests = t.get('tests', default.TESTS_GPU if self.gpu else default.TESTS_CPU)
            self.benchmark = t['benchmark']
            self.time = t['time']
            self.tcol, self.columns = t['columns']
            self.trow, self.rows = t.get('rows', [0,1])
            assert 0 <= self.tcol < self.columns
            assert 0 <= self.trow < self.rows
        self.max = t.get('max', default.MAX)
        assert len(self.max) == 2
        self.range = max(self.max)
        self.week = t.get('week', WEEKS)
        if self.week == WEEKS:
            self.max = self.max[:1]
        assert len(self.id) == 3
        self.family = self.id[0:2]
        self.url = URL_BASE + self.family + ".html#" + self.id
        self.path = os.path.join(grading.root, self.id)

        if self.report:
            self.filename = os.path.join(self.path, REPORT)

        self.week_ranges = []
        for j,m in enumerate(self.max):
            if j == 0:
                w1 = 1
                w2 = self.week
            else:
                w1 = self.week + 1
                w2 = WEEKS
            self.week_ranges.append([w1, w2])
        self.point_table = []
        for i in range(self.range):
            p = self.range - i
            row = []
            for m in self.max:
                j = m - p
                if j < 0:
                    row.append(None)
                elif self.report:
                    row.append(inf)
                elif p == 1:
                    row.append(inf)
                elif j < len(self.time):
                    row.append(self.time[j])
                else:
                    row.append(self.time[-1])
            self.point_table.append([p, row])

    def get_results(self):
        self.results = [Result(self, i) for i in range(WEEKS)]

    def get_max(self, week):
        if week <= self.week:
            return self.max[0]
        else:
            return self.max[1]

    def score(self, week, time):
        if self.report:
            assert time == 0
            return 0
        assert time > 0
        col = 0 if week <= self.week else 1
        for p, row in self.point_table:
            t = row[col]
            if t is not None and time < t:
                return p
        return 0
        

class Grading:
    def __init__(self):
        # Directories
        try:
            self.root = subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).rstrip('\n')
        except:
            error("Sorry, I could not find the root directory of the Git repository")

        # Tasks
        self.all_tasks = [t['id'] for t in TASKS]
        self.task_map = {t['id']: Task(self, t) for t in TASKS}
        assert len(self.all_tasks) == len(self.task_map)
        current = os.path.basename(os.getcwd())
        if current in self.task_map:
            self.current_task = current
        else:
            self.current_task = None

        # Computers
        self.host = socket.getfqdn()
        self.system = platform.system()
        self.valid_host = self.host in HOSTS and self.system == 'Linux'
        if 'PPC_FORCE' in os.environ:
            self.valid_host = True

        # Date
        override = os.environ.get('PPC_DATE')
        if override is not None:
            date = datetime.datetime.strptime(override, "%Y-%m-%d")
        else:
            date = datetime.date.today()
        year, week, day = date.isocalendar()
        year0, week0 = WEEK0
        self.outside = 0
        self.week = None
        if year < year0:
            self.outside = -1
            self.week_label = 'wrong year'
        elif year > year0:
            self.outside = +1
            self.week_label = 'wrong year'
        else:
            offset = week - week0
            if offset <= 0:
                self.outside = -1
                self.week_label = '{} before the course starts'.format(weeks(1 - offset))
            elif offset > WEEKS:
                self.outside = +1
                self.week_label = '{} after the course ends'.format(weeks(offset - WEEKS))
            else:
                self.week = offset
                self.week_label = 'week {} of the course'.format(offset)

    def task_table(self, task, time=None):
        cell = "{:18s}"
        print "         ",
        for x,y in task.week_ranges:
            print cell.format(week_range(x,y)),
        print
        print
        for p, row in task.point_table:
            print "  {:2d} pt: ".format(p),
            for t in row:
                if t is None:
                    v = "-"
                elif t == inf:
                    if task.report:
                        v = "+"
                    else:
                        v = "any time"
                else:
                    v = "time < {:.1f}".format(t)
                if t is not None and time is not None:
                    if time < t:
                        print col.good + cell.format(v) + col.reset,
                    else:
                        print col.error + cell.format(v) + col.reset,
                else:
                    print cell.format(v),
            print
        print

    def task_table_compact(self, task):
        for i,m in enumerate(task.max):
            x,y = task.week_ranges[i]
            print "  {}:  {}-{} pt".format(week_range(x,y), 0, m)
        print

    def info(self, tasks):
        for taskid in tasks:
            task = self.task_map[taskid]
            ptask(task)
            if task.report:
                print "This is an open-ended task. See the web page for instructions."
                print "I will just check that the following file exists:"
                print
                pcmd([task.filename], 2)
                print
                print "The grading scale is:"
                print
                self.task_table_compact(task)
            else:
                print "Before grading, I will run the following commands:"
                print
                pcmd(["cd", task.path], 2)
                for test in task.tests:
                    pcmd(test, 2)
                print
                print "For grading, I will use the following command:"
                print
                pcmd(task.benchmark, 2)
                print
                print "It should print {} with {}".format(
                    plural(task.rows, 'row'),
                    plural(task.columns, 'column'),
                )
                print "The relevant part is at row {}, column {}.".format(
                    task.trow + 1,
                    task.tcol + 1,
                )
                print "The grading thresholds are:"
                print
                self.task_table(task)

    def overview(self, tasks):
        print
        print "Maximum score for each task and each week:"
        print
        print col.bold + "week:     ",
        for w in range(1, WEEKS+1):
            print "{:2d}".format(w),
        print col.reset
        print "          ",
        for w in range(1, WEEKS+1):
            m = ""
            if self.week is not None and self.week == w:
                m = "*"
            print "{:>2s}".format(m),
        print
        family = None
        for taskid in tasks:
            task = self.task_map[taskid]
            if task.family != family:
                if family is not None:
                    print
                family = task.family
            print col.bold + "{}: ".format(taskid) + col.reset,
            if task.report:
                special = ''
            elif task.gpu:
                special = 'gpu'
            else:
                special = 'cpu'
            print '{:4s}'.format(special),
            for w in range(1, WEEKS+1):
                x = task.get_max(w)
                v = "{:2d}".format(x)
                if x < task.range:
                    print v,
                else:
                    print col.good + v + col.reset,
            print
        print

    def save(self, task, time):
        w = self.week
        assert w is not None
        task.get_results()
        r = task.results[w-1]
        if task.report:
            assert time == 0
            if r.submission is not None:
                assert r.submission == 0
                print "You have apparently already submitted this task, skipping."
                print
                return
        else:
            assert time > 0
            if r.submission is not None and r.submission <= time:
                assert r.submission > 0
                print "You have already submitted this task with a better running time: {}".format(r.submission)
                print "Delete {} if you really want to overwrite it.".format(r.sfile_short)
                print
                return
        try:
            with open(r.sfile, 'w') as f:
                f.write('{}\n'.format(time))
        except:
            sys.exit("Could not create {}".format(r.sfile_short))
        print "Your submission is now stored in the following file:"
        print
        pcmd([r.sfile], 2)
        print
        print "Just add, commit, and push it."
        print

    def show(self, tasks):
        print
        print "? = tasks waiting for grading"
        print
        print col.bold + "Task   Week   Time   Points + Feedback = Total   Max" + col.reset
        print
        total = 0
        maxtotal = 0
        for taskid in tasks:
            task = self.task_map[taskid]
            task.get_results()
            idprint = task.id
            best = 0
            best_time = inf
            for r in task.results:
                if r.submission is not None:
                    print "{t}{:<4s}{n}   {:<4d} {:>6}    {:>4}  +  {:<4}    = {b}{:<5}{n}   {}".format(
                        idprint,
                        r.week,
                        "-" if task.report else "{:.1f}".format(r.submission),
                        r.automatic,
                        dnone(r.feedback, "?"),
                        dnone(r.final, "?"),
                        r.max,
                        b=col.bold,
                        t=col.task,
                        n=col.reset,
                    )
                    if r.final is not None:
                        best = max(best, r.final)
                    best_time = min(best_time, r.submission)
                    idprint = ""
            tprint = ""
            if not task.report and best_time < inf:
                tprint = "{:.1f}".format(best_time)
            print "{t}{:<4s}{n}   best {:>6}                       {b}{:<5}{n}   {}".format(
                idprint,
                tprint,
                best,
                task.range,
                b=col.bold,
                t=col.task,
                n=col.reset,
            )
            print
            total += best
            maxtotal += task.range
        print "{b}total                                    {:<5}   {}{n}".format(
            total, maxtotal,
            b=col.bold,
            t=col.task,
            n=col.reset,
        )
        print


    def submit(self, tasks):
        if self.outside:
            error("The course is not currently open")
        for taskid in tasks:
            task = self.task_map[taskid]
            ptask(task)
            if not task.report:
                print "Normal task, skipping (try 'do')."
                print
                continue
            print "Checking that the following file exists:"
            print
            pcmd([task.filename], 2)
            if not os.path.exists(task.filename):
                error("Could not find {}".format(task.filename))
            print
            print "Looks good."
            print
            self.save(task, 0)

    def do(self, tasks, dryrun=False, skiptest=False):
        if self.outside:
            if not dryrun:
                error("The course is not currently open; try 'dryrun'")
        if not self.valid_host:
            if not dryrun:
                error("This does not seem to be a valid classroom computer; try 'dryrun'")
            else:
                warning("This does not seem to be a valid classroom computer, but proceeding anyway...")
        loads = os.getloadavg()
        high_load = loads[0] > 1
        print
        print "Load average for 1 min: {b}{:.2f}{n},  5 min: {b}{:.2f}{n},  15 min: {b}{:.2f}{n}".format(
            *loads, b=col.bold, n=col.reset
        )
        if high_load:
            warning("System load is fairly high, careful!")
        for taskid in tasks:
            task = self.task_map[taskid]
            try:
                ptask(task)
                if task.report:
                    print "Open-ended task, skipping (try 'submit')."
                    continue
                print "Running tests..."
                print
                pcmd(["cd", task.path])
                try:
                    os.chdir(task.path)
                except:
                    error("Could not enter directory {}".format(task.path))
                if not skiptest:
                    for test in task.tests:
                        print_run(test)
                output = print_run(task.benchmark, output=True)
                print output.rstrip('\n')
                output_lines = output.rstrip('\n').split('\n')
                if len(output_lines) != task.rows:
                    error("Expected {} of output, got {} of output".format(
                        plural(task.rows, 'row'),
                        plural(len(output_lines), 'row'),
                    ))
                output_columns = output_lines[task.trow].split('\t')
                if len(output_columns) != task.columns:
                    error("Expected {} of output, got {} of output".format(
                        plural(task.columns, 'column'),
                        plural(len(output_columns), 'column'),
                    ))
                time = output_columns[task.tcol]
                try:
                    time = float(time)
                except:
                    error("Could not parse time: {}".format(time))
                print
                print "Success! Your running time: {}{}{}".format(col.bold, time, col.reset)
                print "The grading thresholds are:"
                print
                self.task_table(task, time)
                if not dryrun:
                    self.save(task, time)

            except Exception, e:
                error("{}: {}".format(type(e).__name__, str(e)))

            except KeyboardInterrupt:
                error("Interrupted")

        if high_load:
            warning("System load was fairly high when you started grading, careful!")

    def ui(self):
        args = sys.argv[1:]
        if len(args) == 0:
            self.help()
            return
        cmd = args[0]
        tasks = args[1:]
        if len(tasks) == 0:
            if self.current_task is None:
                error("No task specified")
            else:
                tasks = [self.current_task]
        elif tasks == ['all']:
            tasks = self.all_tasks
        elif tasks == ['cpu']:
            tasks = [t for t in self.all_tasks if not self.task_map[t].report and not self.task_map[t].gpu]
        elif tasks == ['gpu']:
            tasks = [t for t in self.all_tasks if not self.task_map[t].report and self.task_map[t].gpu]
        for t in tasks:
            if t not in self.task_map:
                error("Unknown task: {}".format(t))
        if cmd == 'info':
            self.info(tasks)
        elif cmd == 'overview':
            self.overview(tasks)
        elif cmd == 'show':
            self.show(tasks)
        elif cmd == 'do':
            self.do(tasks)
        elif cmd == 'dryrun':
            self.do(tasks, dryrun=True)
        elif cmd == 'benchmark':
            self.do(tasks, dryrun=True, skiptest=True)
        elif cmd == 'submit':
            self.submit(tasks)
        else:
            error("Unknown command: {}".format(cmd))

    def help(self):
        loads = os.getloadavg()
        print """
Usage: grading COMMAND [TASK ...]

    grading overview  - Show a brief overview of the tasks
    grading info      - Show more information on the tasks

    grading show      - Show my current grades

    grading do        - Do grading
    grading dryrun    - Do grading but do not record the result
    grading benchmark - Run benchmark without re-compiling
    grading submit    - Submit open-ended tasks (no automatic grading)

By default, all commands apply to the task in the current working directory.
You can override this default by giving the names of the tasks, e.g.:

    grading do mf1 mf2

You can use the keyword "all", "cpu", and "gpu" to apply the command to all
tasks, all CPU tasks, and all GPU tasks, e.g.:

    grading show all
    grading do cpu
    grading overview gpu

Status:

  - root directory of your repository: {root}
  - computer: {host}, {system} ({valid_host})
  - load averages: {l1:.2f}, {l5:.2f}, {l15:.2f}
  - date: {week}

Hint: to read long outputs with colours, try piping to "less -R":

    grading show all | less -R
""".format(
            current_task="not specified" if self.current_task is None else self.current_task,
            all_tasks=" ".join(self.all_tasks),
            host=self.host,
            system=self.system,
            valid_host='valid' if self.valid_host else 'not valid',
            root=self.root,
            week=self.week_label,
            l1=loads[0],
            l5=loads[1],
            l15=loads[2],
        )


Grading().ui()
